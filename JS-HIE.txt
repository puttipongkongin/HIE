(() => {
  "use strict";

  // --- DOM Elements ---
  const sections = {
    register: document.getElementById("registerSection"),
    login: document.getElementById("loginSection"),
    patientDashboard: document.getElementById("patientDashboard"),
    physicianDashboard: document.getElementById("physicianDashboard"),
    nav: document.getElementById("nav"),
  };

  const registerForm = document.getElementById("registerForm");
  const loginForm = document.getElementById("loginForm");
  const registerRole = document.getElementById("registerRole");
  const physicianVerificationFields = document.getElementById("physicianVerificationFields");
  const registerStatus = document.getElementById("registerStatus");
  const loginStatus = document.getElementById("loginStatus");

  // Patient dashboard elements
  const patientNameEl = document.getElementById("patientName");
  const patientAppointmentsList = document.getElementById("patientAppointmentsList");
  const patientDataForm = document.getElementById("patientDataForm");
  const patientDobInput = document.getElementById("patientDob");
  const patientAllergiesInput = document.getElementById("patientAllergies");
  const patientUpdateStatus = document.getElementById("patientUpdateStatus");
  const patientAppointmentForm = document.getElementById("patientAppointmentForm");
  const patientAppointmentDate = document.getElementById("patientAppointmentDate");
  const patientAppointmentTime = document.getElementById("patientAppointmentTime");
  const patientAppointmentStatus = document.getElementById("patientAppointmentStatus");
  const patientRefreshBtn = document.getElementById("patientRefreshBtn");

  // Sanatorium consent elements
  const sanatoriumListDiv = document.getElementById("sanatoriumList");
  const dataSharingForm = document.getElementById("dataSharingForm");
  const dataSharingStatus = document.getElementById("dataSharingStatus");

  // Physician dashboard elements
  const physicianNameEl = document.getElementById("physicianName");
  const physicianVerificationStatus = document.getElementById("physicianVerificationStatus");
  const physicianPatientTableBody = document.getElementById("physicianPatientTableBody");
  const physicianPatientDetails = document.getElementById("physicianPatientDetails");
  const physicianRefreshBtn = document.getElementById("physicianRefreshBtn");
  const physicianLogoutBtn = document.getElementById("physicianLogoutBtn");

  // Navigation buttons
  const nav = sections.nav;
  const dashboardBtn = document.getElementById("dashboardBtn");
  const logoutBtn = document.getElementById("logoutBtn");
  const showLoginBtn = document.getElementById("showLoginBtn");
  const showRegisterBtn = document.getElementById("showRegisterBtn");

  // Current logged-in user
  let currentUser = null;

  // --- Utility localStorage helpers ---

  function getUsers() {
    try {
      return JSON.parse(localStorage.getItem("users")) || [];
    } catch {
      return [];
    }
  }
  function saveUsers(users) {
    localStorage.setItem("users", JSON.stringify(users));
  }
  function getPatients() {
    try {
      return JSON.parse(localStorage.getItem("patients")) || [];
    } catch {
      return [];
    }
  }
  function savePatients(patients) {
    localStorage.setItem("patients", JSON.stringify(patients));
  }
  function getAppointments() {
    try {
      return JSON.parse(localStorage.getItem("appointments")) || [];
    } catch {
      return [];
    }
  }
  function saveAppointments(appointments) {
    localStorage.setItem("appointments", JSON.stringify(appointments));
  }
  function getSanatoriumConsent(patientId) {
    try {
      return JSON.parse(localStorage.getItem(`sanatoriumConsent_${patientId}`)) || [];
    } catch {
      return [];
    }
  }
  function saveSanatoriumConsent(patientId, selected) {
    localStorage.setItem(`sanatoriumConsent_${patientId}`, JSON.stringify(selected));
  }

  // Current User session handling
  function setCurrentUser(user) {
    localStorage.setItem("currentUser", JSON.stringify(user));
    currentUser = user;
  }
  function loadCurrentUser() {
    try {
      const userStr = localStorage.getItem("currentUser");
      if (!userStr) return null;
      currentUser = JSON.parse(userStr);
      return currentUser;
    } catch {
      return null;
    }
  }
  function clearCurrentUser() {
    localStorage.removeItem("currentUser");
    currentUser = null;
  }

  // Show only one section at a time, toggle nav visibility accordingly
  function showSection(name) {
    Object.entries(sections).forEach(([key, elem]) => {
      if (key === name) elem.classList.remove("hidden");
      else elem.classList.add("hidden");
    });
    if (name === "patientDashboard" || name === "physicianDashboard") {
      nav.classList.remove("hidden");
    } else {
      nav.classList.add("hidden");
    }
  }

  // Clear forms and message texts
  function clearFormsAndMessages() {
    ["registerUsernameError", "registerPasswordError", "registerRoleError", "licenseNumberError"].forEach(id => {
      const el = document.getElementById(id);
      if (el) el.textContent = "";
    });
    registerStatus.textContent = "";
    registerStatus.className = "";
    loginStatus.textContent = "";
    loginStatus.className = "";

    ["registerUsername", "registerPassword", "licenseNumber"].forEach(id => {
      const el = document.getElementById(id);
      if (el) el.value = "";
    });
    registerRole.value = "";
    physicianVerificationFields.classList.add("hidden");

    ["loginUsernameError", "loginPasswordError"].forEach(id => {
      const el = document.getElementById(id);
      if (el) el.textContent = "";
    });
    ["loginUsername", "loginPassword"].forEach(id => {
      const el = document.getElementById(id);
      if (el) el.value = "";
    });

    if (patientUpdateStatus) patientUpdateStatus.textContent = "";
    if (patientAppointmentStatus) patientAppointmentStatus.textContent = "";
    if (dataSharingStatus) dataSharingStatus.textContent = "";
  }

  // --- Registration ---

  function validateRegistration(data) {
    const errors = {};
    if (!data.username || data.username.trim().length < 3) errors.username = "Username must be at least 3 characters.";
    if (!data.password || data.password.length < 6) errors.password = "Password must be at least 6 characters.";
    if (!data.role || !["patient", "physician"].includes(data.role)) errors.role = "Please select a role.";
    if (data.role === "physician" && (!data.licenseNumber || data.licenseNumber.trim().length < 5)) {
      errors.licenseNumber = "Valid license number is required for physicians.";
    }
    return errors;
  }

  function addUser(user) {
    const users = getUsers();
    if (users.find(u => u.username.toLowerCase() === user.username.toLowerCase())) return false;
    users.push(user);
    saveUsers(users);
    return true;
  }

  registerRole.addEventListener("change", () => {
    if (registerRole.value === "physician") {
      physicianVerificationFields.classList.remove("hidden");
    } else {
      physicianVerificationFields.classList.add("hidden");
    }
  });

  registerForm.addEventListener("submit", e => {
    e.preventDefault();

    ["registerUsernameError", "registerPasswordError", "registerRoleError", "licenseNumberError"].forEach(id => {
      const el = document.getElementById(id);
      if (el) el.textContent = "";
    });
    registerStatus.textContent = "";
    registerStatus.className = "";

    const formData = {
      username: document.getElementById("registerUsername").value.trim(),
      password: document.getElementById("registerPassword").value,
      role: registerRole.value,
      licenseNumber: document.getElementById("licenseNumber").value.trim(),
      verified: document.getElementById("verifiedCheckbox").checked,
    };
    const errors = validateRegistration(formData);
    if (Object.keys(errors).length > 0) {
      if (errors.username) document.getElementById("registerUsernameError").textContent = errors.username;
      if (errors.password) document.getElementById("registerPasswordError").textContent = errors.password;
      if (errors.role) document.getElementById("registerRoleError").textContent = errors.role;
      if (errors.licenseNumber) document.getElementById("licenseNumberError").textContent = errors.licenseNumber;
      return;
    }

    const newUser = {
      userId: crypto.randomUUID ? crypto.randomUUID() : Date.now().toString(),
      username: formData.username,
      password: formData.password,
      role: formData.role,
      licenseNumber: formData.role === "physician" ? formData.licenseNumber : "",
      verified: formData.role === "physician" ? formData.verified : true,
    };
    if (!addUser(newUser)) {
      registerStatus.textContent = "Username already exists, please choose another.";
      registerStatus.className = "error";
      return;
    }

    registerStatus.textContent = "Registration successful! You can now log in.";
    registerStatus.className = "success";

    setTimeout(() => {
      clearFormsAndMessages();
      showSection("login");
    }, 1800);
  });

  // --- Login ---

  function findUser(username) {
    const users = getUsers();
    return users.find(u => u.username.toLowerCase() === username.toLowerCase());
  }

  loginForm.addEventListener("submit", e => {
    e.preventDefault();

    document.getElementById("loginUsernameError").textContent = "";
    document.getElementById("loginPasswordError").textContent = "";
    loginStatus.textContent = "";
    loginStatus.className = "";

    const username = document.getElementById("loginUsername").value.trim();
    const password = document.getElementById("loginPassword").value;

    if (!username) {
      document.getElementById("loginUsernameError").textContent = "Username is required.";
      return;
    }
    if (!password) {
      document.getElementById("loginPasswordError").textContent = "Password is required.";
      return;
    }

    const user = findUser(username);
    if (!user || user.password !== password) {
      loginStatus.textContent = "Invalid username or password.";
      loginStatus.className = "error";
      return;
    }

    loginStatus.textContent = "";
    setCurrentUser(user);
    initDashboardForUser(user);
  });

  // --- Logout & navigation ---

  logoutBtn.addEventListener("click", () => {
    clearCurrentUser();
    clearFormsAndMessages();
    showSection("login");
  });

  dashboardBtn.addEventListener("click", () => {
    if (currentUser) {
      initDashboardForUser(currentUser);
    }
  });

  if (physicianLogoutBtn) {
    physicianLogoutBtn.addEventListener("click", () => {
      clearCurrentUser();
      clearFormsAndMessages();
      showSection("login");
    });
  }

  showLoginBtn.addEventListener("click", () => {
    clearFormsAndMessages();
    showSection("login");
  });

  showRegisterBtn.addEventListener("click", () => {
    clearFormsAndMessages();
    showSection("register");
  });

  // --- DASHBOARDS ---

  function initDashboardForUser(user) {
    clearFormsAndMessages();
    if (user.role === "patient") {
      showSection("patientDashboard");
      renderPatientDashboard(user);
    } else if (user.role === "physician") {
      showSection("physicianDashboard");
      renderPhysicianDashboard(user);
    } else {
      alert("Unknown role. Logging out.");
      clearCurrentUser();
      showSection("login");
    }
  }

  // --- Patient Dashboard Logic ---

  // Set DOB input min/max (150 years ago to today)
  function setDobRange() {
    if (!patientDobInput) return;
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, "0");
    const dd = String(today.getDate()).padStart(2, "0");

    patientDobInput.max = `${yyyy}-${mm}-${dd}`;
    patientDobInput.min = `${yyyy - 150}-${mm}-${dd}`;
  }

  // Render Patient Dashboard: Fill data fields, load consents and appointments
  function renderPatientDashboard(user) {
    patientNameEl.textContent = user.username;
    setDobRange();

    let patients = getPatients();
    let patientData = patients.find(p => p.patientId.toLowerCase() === user.username.toLowerCase());

    // Create patient record if none exists
    if (!patientData) {
      patientData = {
        patientId: user.username,
        name: user.username,
        dob: "",
        allergies: "",
      };
      patients.push(patientData);
      savePatients(patients);
    }

    patientDobInput.value = patientData.dob;
    patientAllergiesInput.value = patientData.allergies;

    // Load saved sanatorium consents and check checkboxes
    hydrateSanatoriumChecklist();

    // Render appointments
    renderPatientAppointments(user.username);
  }

  patientDataForm.addEventListener("submit", e => {
    e.preventDefault();
    patientUpdateStatus.textContent = "";
    patientUpdateStatus.className = "";

    if (!currentUser || currentUser.role !== "patient") return;

    const dob = patientDobInput.value;
    const allergies = patientAllergiesInput.value.trim();

    if (dob && new Date(dob) > new Date()) {
      patientUpdateStatus.textContent = "Date of Birth cannot be in the future.";
      patientUpdateStatus.className = "error";
      return;
    }

    let patients = getPatients();
    const idx = patients.findIndex(p => p.patientId.toLowerCase() === currentUser.username.toLowerCase());
    if (idx < 0) return;

    patients[idx].dob = dob;
    patients[idx].allergies = allergies;
    savePatients(patients);

    patientUpdateStatus.textContent = "Health data updated successfully.";
    patientUpdateStatus.className = "success";
  });

  // --- Sanatorium Consent Checklist Management ---

  // Mark checkboxes according to saved consent
  function hydrateSanatoriumChecklist() {
    if (!currentUser || currentUser.role !== "patient") return;
    const savedConsents = getSanatoriumConsent(currentUser.username.toLowerCase());
    if (!sanatoriumListDiv) return;
    const checkboxes = sanatoriumListDiv.querySelectorAll("input[type=checkbox]");
    checkboxes.forEach(cb => {
      cb.checked = savedConsents.includes(cb.value);
    });
    if (dataSharingStatus) {
      dataSharingStatus.textContent = "";
      dataSharingStatus.className = "";
    }
  }

  dataSharingForm.addEventListener("submit", e => {
    e.preventDefault();
    if (!currentUser || currentUser.role !== "patient") return;

    if (!sanatoriumListDiv) return;
    const selectedSanatoriums = Array.from(sanatoriumListDiv.querySelectorAll("input[type=checkbox]:checked"))
      .map(cb => cb.value);

    if (selectedSanatoriums.length === 0) {
      if (dataSharingStatus) {
        dataSharingStatus.textContent = "Please select at least one sanatorium to share data with.";
        dataSharingStatus.className = "error";
      }
      return;
    }

    saveSanatoriumConsent(currentUser.username.toLowerCase(), selectedSanatoriums);
    if (dataSharingStatus) {
      dataSharingStatus.textContent = `Data sharing consent saved for ${selectedSanatoriums.length} sanatorium(s).`;
      dataSharingStatus.className = "success";
    }
  });

  // --- Patient Appointments ---

  function renderPatientAppointments(patientId) {
    const appointments = getAppointments();
    const filtered = appointments.filter(a => a.patientId.toLowerCase() === patientId.toLowerCase());

    patientAppointmentsList.innerHTML = "";
    if (filtered.length === 0) {
      patientAppointmentsList.innerHTML = "<li>No upcoming appointments.</li>";
      return;
    }

    filtered.sort((a, b) => new Date(a.date + "T" + a.time) - new Date(b.date + "T" + b.time));

    for (const appt of filtered) {
      const li = document.createElement("li");
      li.textContent = `${appt.date} at ${appt.time}`;
      patientAppointmentsList.appendChild(li);
    }
  }

  patientAppointmentForm.addEventListener("submit", e => {
    e.preventDefault();
    patientAppointmentStatus.textContent = "";
    patientAppointmentStatus.className = "";

    if (!currentUser || currentUser.role !== "patient") return;

    const date = patientAppointmentDate.value;
    const time = patientAppointmentTime.value;

    if (!date || !time) {
      patientAppointmentStatus.textContent = "Please fill all fields.";
      patientAppointmentStatus.className = "error";
      return;
    }

    if (new Date(date + "T" + time) < new Date()) {
      patientAppointmentStatus.textContent = "Cannot schedule in the past.";
      patientAppointmentStatus.className = "error";
      return;
    }

    const appointments = getAppointments();

    if (appointments.find(appt => appt.patientId.toLowerCase() === currentUser.username.toLowerCase() && appt.date === date && appt.time === time)) {
      patientAppointmentStatus.textContent = "Appointment conflict detected.";
      patientAppointmentStatus.className = "error";
      return;
    }

    appointments.push({ patientId: currentUser.username, date, time });
    saveAppointments(appointments);

    patientAppointmentDate.value = "";
    patientAppointmentTime.value = "";

    patientAppointmentStatus.textContent = "Appointment scheduled successfully.";
    patientAppointmentStatus.className = "success";

    renderPatientAppointments(currentUser.username);
  });

  patientRefreshBtn && patientRefreshBtn.addEventListener("click", () => {
    if (currentUser && currentUser.role === "patient") {
      renderPatientAppointments(currentUser.username);
    }
  });

  // --- Physician Dashboard ---

  function renderPhysicianDashboard(user) {
    physicianNameEl.textContent = user.username;

    if (!user.verified) {
      physicianVerificationStatus.textContent = "Your account is pending verification. Access is restricted.";
      physicianPatientTableBody.innerHTML = "";
      physicianPatientDetails.innerHTML = "";
      return;
    }
    physicianVerificationStatus.textContent = "";
    renderPhysicianPatients();
  }

  function renderPhysicianPatients() {
    physicianPatientTableBody.innerHTML = "";
    physicianPatientDetails.innerHTML = "";

    const patients = getPatients();
    if (patients.length === 0) {
      physicianPatientTableBody.innerHTML = "<tr><td colspan='5' style='text-align:center;'>No patients found.</td></tr>";
      return;
    }

    for (const p of patients) {
      const tr = document.createElement("tr");
      tr.innerHTML = `
        <td>${p.patientId}</td>
        <td>${p.name || "(no name)"}</td>
        <td>${p.dob || "-"}</td>
        <td>${p.allergies || "-"}</td>
        <td><button data-patient-id="${p.patientId}">View Details</button></td>
      `;
      physicianPatientTableBody.appendChild(tr);
    }

    [...physicianPatientTableBody.querySelectorAll("button")].forEach(btn => {
      btn.addEventListener("click", e => {
        const pid = e.target.getAttribute("data-patient-id");
        showPhysicianPatientDetails(pid);
      });
    });
  }

  function showPhysicianPatientDetails(patientId) {
    const patients = getPatients();
    const patient = patients.find(p => p.patientId === patientId);
    if (!patient) return;

    let html = `
      <h3>Details for Patient: ${patient.patientId}</h3>
      <p><strong>Name:</strong> ${patient.name || "(none)"}</p>
      <p><strong>Date of Birth:</strong> ${patient.dob || "-"}</p>
      <p><strong>Allergies:</strong> ${patient.allergies || "-"}</p>
    `;

    // Sanatorium consents
    const sanatoriums = getSanatoriumConsent(patientId.toLowerCase());
    if (sanatoriums.length > 0) {
      html += "<p><strong>Authorized Sanatoriums:</strong></p><ul>";
      sanatoriums.forEach(url => {
        html += `<li>${url}</li>`;
      });
      html += "</ul>";
    } else {
      html += "<p><em>No sanatorium consent data.</em></p>";
    }

    // Show appointments
    const appointments = getAppointments();
    const patientAppts = appointments.filter(a => a.patientId === patientId);
    if (patientAppts.length === 0) {
      html += "<p><em>No appointments scheduled.</em></p>";
    } else {
      html += "<p><strong>Appointments:</strong></p><ul>";
      patientAppts.forEach(a => {
        html += `<li>${a.date} at ${a.time}</li>`;
      });
      html += "</ul>";
    }

    physicianPatientDetails.innerHTML = html;
  }

  physicianRefreshBtn && physicianRefreshBtn.addEventListener("click", () => {
    if (currentUser && currentUser.role === "physician" && currentUser.verified) {
      renderPhysicianPatients();
    }
  });

  // --- Initialization on page load ---

  window.addEventListener("DOMContentLoaded", () => {
    const user = loadCurrentUser();
    if (user) {
      initDashboardForUser(user);
    } else {
      showSection("register");
    }
    setDobRange();
  });
})();
