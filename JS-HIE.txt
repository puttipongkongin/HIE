(() => {
  "use strict";

  // --- DOM Elements ---
  const sections = {
    register: document.getElementById("registerSection"),
    login: document.getElementById("loginSection"),
    patientDashboard: document.getElementById("patientDashboard"),
    physicianDashboard: document.getElementById("physicianDashboard"),
    adminDashboard: document.getElementById("adminDashboard"),
    nav: document.getElementById("nav"),
  };

  // Registration/Login/Admin Forms and controls
  const registerForm = document.getElementById("registerForm");
  const loginForm = document.getElementById("loginForm");
  const registerRole = document.getElementById("registerRole");
  const physicianVerificationFields = document.getElementById("physicianVerificationFields");
  const registerStatus = document.getElementById("registerStatus");
  const loginStatus = document.getElementById("loginStatus");

  // Patient Dashboard Elements
  const patientNameEl = document.getElementById("patientName");
  const patientDataForm = document.getElementById("patientDataForm");
  const patientDobInput = document.getElementById("patientDob");
  const patientAllergiesInput = document.getElementById("patientAllergies");
  const patientUpdateStatus = document.getElementById("patientUpdateStatus");
  const patientAppointmentForm = document.getElementById("patientAppointmentForm");
  const patientAppointmentDate = document.getElementById("patientAppointmentDate");
  const patientAppointmentTime = document.getElementById("patientAppointmentTime");
  const patientAppointmentStatus = document.getElementById("patientAppointmentStatus");
  const patientAppointmentsList = document.getElementById("patientAppointmentsList");
  const patientRefreshBtn = document.getElementById("patientRefreshBtn");
  const sanatoriumCodeInput = document.getElementById("sanatoriumCodeInput");
  const dataSharingForm = document.getElementById("dataSharingForm");
  const dataSharingStatus = document.getElementById("dataSharingStatus");

  // Admin Dashboard Elements
  const adminNameEl = document.getElementById("adminName");
  const adminSanatoriumForm = document.getElementById("adminSanatoriumForm");
  const adminSanatoriumName = document.getElementById("adminSanatoriumName");
  const adminSanatoriumStatus = document.getElementById("adminSanatoriumStatus");
  const sanatoriumListAdmin = document.getElementById("sanatoriumListAdmin");
  const adminForwardForm = document.getElementById("adminForwardForm");
  const adminForwardUser = document.getElementById("adminForwardUser");
  const adminForwardCode = document.getElementById("adminForwardCode");
  const adminForwardStatus = document.getElementById("adminForwardStatus");

  // Physician Dashboard Elements
  const physicianNameEl = document.getElementById("physicianName");
  const physicianVerificationStatus = document.getElementById("physicianVerificationStatus");
  const physicianPatientTableBody = document.getElementById("physicianPatientTableBody");
  const physicianPatientDetails = document.getElementById("physicianPatientDetails");
  const physicianRefreshBtn = document.getElementById("physicianRefreshBtn");
  const physicianLogoutBtn = document.getElementById("physicianLogoutBtn");

  // Nav Buttons
  const nav = sections.nav;
  const dashboardBtn = document.getElementById("dashboardBtn");
  const logoutBtn = document.getElementById("logoutBtn");
  const showLoginBtn = document.getElementById("showLoginBtn");
  const showRegisterBtn = document.getElementById("showRegisterBtn");

  // Current User in session
  let currentUser = null;

  // --- LocalStorage helpers ---
  function getUsers() {
    try {
      return JSON.parse(localStorage.getItem("users")) || [];
    } catch {
      return [];
    }
  }
  function saveUsers(users) {
    localStorage.setItem("users", JSON.stringify(users));
  }
  function getPatients() {
    try {
      return JSON.parse(localStorage.getItem("patients")) || [];
    } catch {
      return [];
    }
  }
  function savePatients(patients) {
    localStorage.setItem("patients", JSON.stringify(patients));
  }
  function getAppointments() {
    try {
      return JSON.parse(localStorage.getItem("appointments")) || [];
    } catch {
      return [];
    }
  }
  function saveAppointments(appointments) {
    localStorage.setItem("appointments", JSON.stringify(appointments));
  }
  function getSanatoriumConsent(patientId) {
    try {
      return JSON.parse(localStorage.getItem(`sanatoriumConsent_${patientId}`)) || [];
    } catch {
      return [];
    }
  }
  function saveSanatoriumConsent(patientId, selected) {
    localStorage.setItem(`sanatoriumConsent_${patientId}`, JSON.stringify(selected));
  }

  function getSanatoriums() {
    try {
      return JSON.parse(localStorage.getItem("sanatoriums")) || [];
    } catch {
      return [];
    }
  }
  function saveSanatoriums(sanatoriums) {
    localStorage.setItem("sanatoriums", JSON.stringify(sanatoriums));
  }

  // --- Session ---
  function setCurrentUser(user) {
    localStorage.setItem("currentUser", JSON.stringify(user));
    currentUser = user;
  }
  function loadCurrentUser() {
    try {
      const usr = localStorage.getItem("currentUser");
      if (!usr) return null;
      currentUser = JSON.parse(usr);
      return currentUser;
    } catch {
      return null;
    }
  }
  function clearCurrentUser() {
    localStorage.removeItem("currentUser");
    currentUser = null;
  }

  // --- UI Navigation ---
  function showSection(name) {
    for (const key in sections) {
      if (key === name) sections[key].classList.remove("hidden");
      else sections[key].classList.add("hidden");
    }
    if (name === "patientDashboard" || name === "physicianDashboard" || name === "adminDashboard") {
      nav.classList.remove("hidden");
    } else {
      nav.classList.add("hidden");
    }
  }

  function clearFormsAndMessages() {
    const errorIds = ["registerUsernameError", "registerPasswordError", "registerRoleError", "licenseNumberError", "loginUsernameError", "loginPasswordError"];
    errorIds.forEach(id => {
      const el = document.getElementById(id);
      if (el) el.textContent = "";
    });
    const inputs = ["registerUsername", "registerPassword", "licenseNumber", "loginUsername", "loginPassword", "adminSanatoriumName", "adminForwardUser", "adminForwardCode", "sanatoriumCodeInput", "patientAppointmentDate", "patientAppointmentTime"];
    inputs.forEach(id => {
      const el = document.getElementById(id);
      if (el) el.value = "";
    });
    registerStatus.textContent = "";
    registerStatus.className = "";
    loginStatus.textContent = "";
    loginStatus.className = "";
    patientUpdateStatus.textContent = "";
    patientUpdateStatus.className = "";
    patientAppointmentStatus.textContent = "";
    patientAppointmentStatus.className = "";
    dataSharingStatus.textContent = "";
    dataSharingStatus.className = "";
    adminSanatoriumStatus.textContent = "";
    adminForwardStatus.textContent = "";
    adminSanatoriumStatus.className = "";
    adminForwardStatus.className = "";
    physicianVerificationStatus.textContent = "";
    physicianPatientTableBody.innerHTML = "";
    physicianPatientDetails.innerHTML = "";
  }

  // --- Register Role Change ---
  registerRole.addEventListener("change", () => {
    if (registerRole.value === "physician") {
      physicianVerificationFields.classList.remove("hidden");
    } else {
      physicianVerificationFields.classList.add("hidden");
    }
  });

  // --- Registration ---
  registerForm.addEventListener("submit", e => {
    e.preventDefault();
    ["registerUsernameError", "registerPasswordError", "registerRoleError", "licenseNumberError"].forEach(id => {
      const el = document.getElementById(id);
      if (el) el.textContent = "";
    });
    registerStatus.textContent = "";
    registerStatus.className = "";

    const username = document.getElementById("registerUsername").value.trim();
    const password = document.getElementById("registerPassword").value;
    const role = registerRole.value;
    const licenseNumber = document.getElementById("licenseNumber").value.trim();
    const verified = document.getElementById("verifiedCheckbox").checked;

    // Validation
    const errors = {};
    if (!username || username.length < 3) errors.username = "Username must be at least 3 characters.";
    if (!password || password.length < 6) errors.password = "Password must be at least 6 characters.";
    if (!role || !["patient", "physician", "admin"].includes(role)) errors.role = "Please select a valid role.";
    if (role === "physician" && (!licenseNumber || licenseNumber.length <5)) errors.licenseNumber = "Valid license number required for physicians.";

    if (Object.keys(errors).length > 0) {
      if (errors.username) document.getElementById("registerUsernameError").textContent = errors.username;
      if (errors.password) document.getElementById("registerPasswordError").textContent = errors.password;
      if (errors.role) document.getElementById("registerRoleError").textContent = errors.role;
      if (errors.licenseNumber) document.getElementById("licenseNumberError").textContent = errors.licenseNumber;
      return;
    }

    // Check duplicate user
    const users = getUsers();
    if (users.find(u => u.username.toLowerCase() === username.toLowerCase())) {
      registerStatus.textContent = "Username already exists.";
      registerStatus.className = "error";
      return;
    }

    const newUser = {
      userId: crypto.randomUUID ? crypto.randomUUID() : Date.now().toString(),
      username,
      password,
      role,
      licenseNumber: role === "physician" ? licenseNumber : "",
      verified: role === "physician" ? verified : true, 
    };

    users.push(newUser);
    saveUsers(users);

    registerStatus.textContent = "Registration successful! You can now log in.";
    registerStatus.className = "success";

    setTimeout(() => {
      clearFormsAndMessages();
      showSection("login");
    }, 1800);
  });

  // --- Login ---
  loginForm.addEventListener("submit", e => {
    e.preventDefault();

    document.getElementById("loginUsernameError").textContent = "";
    document.getElementById("loginPasswordError").textContent = "";
    loginStatus.textContent = "";
    loginStatus.className = "";

    const username = document.getElementById("loginUsername").value.trim();
    const password = document.getElementById("loginPassword").value;

    if (!username) {
      document.getElementById("loginUsernameError").textContent = "Username is required.";
      return;
    }
    if (!password) {
      document.getElementById("loginPasswordError").textContent = "Password is required.";
      return;
    }

    const users = getUsers();
    const user = users.find(u => u.username.toLowerCase() === username.toLowerCase());

    if (!user || user.password !== password) {
      loginStatus.textContent = "Invalid username or password.";
      loginStatus.className = "error";
      return;
    }

    setCurrentUser(user);
    initDashboardForUser(user);
  });

  // --- Logout and Nav Buttons ---
  logoutBtn.addEventListener("click", () => {
    clearCurrentUser();
    clearFormsAndMessages();
    showSection("login");
  });
  dashboardBtn.addEventListener("click", () => {
    if (currentUser) initDashboardForUser(currentUser);
  });
  if (physicianLogoutBtn) {
    physicianLogoutBtn.addEventListener("click", () => {
      clearCurrentUser();
      clearFormsAndMessages();
      showSection("login");
    });
  }
  showLoginBtn.addEventListener("click", () => {
    clearFormsAndMessages();
    showSection("login");
  });
  showRegisterBtn.addEventListener("click", () => {
    clearFormsAndMessages();
    showSection("register");
  });

  // --- Dashboard Initialization ---
  function initDashboardForUser(user) {
    clearFormsAndMessages();
    if (user.role === "patient") {
      showSection("patientDashboard");
      renderPatientDashboard(user);
    } else if (user.role === "physician") {
      showSection("physicianDashboard");
      renderPhysicianDashboard(user);
    } else if (user.role === "admin") {
      showSection("adminDashboard");
      adminNameEl.textContent = user.username;
      renderSanatoriumTable();
    } else {
      alert("Unknown role. Logging out.");
      clearCurrentUser();
      showSection("login");
    }
  }

  // --- Patient Dashboard Logic ---
  function setDobRange() {
    if (!patientDobInput) return;
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, "0");
    const dd = String(today.getDate()).padStart(2, "0");
    patientDobInput.max = `${yyyy}-${mm}-${dd}`;
    patientDobInput.min = `${yyyy - 150}-${mm}-${dd}`;
  }

  function renderPatientDashboard(user) {
    patientNameEl.textContent = user.username;
    setDobRange();

    // Retrieve or create patient record
    let patients = getPatients();
    let patientData = patients.find(p => p.patientId.toLowerCase() === user.username.toLowerCase());
    if (!patientData) {
      patientData = { patientId: user.username, name: user.username, dob: "", allergies: "" };
      patients.push(patientData);
      savePatients(patients);
    }
    patientDobInput.value = patientData.dob;
    patientAllergiesInput.value = patientData.allergies;

    renderPatientAppointments(user.username);

    // Clear data sharing input/status
    if (sanatoriumCodeInput) sanatoriumCodeInput.value = "";
    if (dataSharingStatus) {
      dataSharingStatus.textContent = "";
      dataSharingStatus.className = "";
    }
  }

  patientDataForm.addEventListener("submit", e => {
    e.preventDefault();
    patientUpdateStatus.textContent = "";
    patientUpdateStatus.className = "";

    if (!currentUser || currentUser.role !== "patient") return;

    const dob = patientDobInput.value;
    const allergies = patientAllergiesInput.value.trim();

    if (dob && new Date(dob) > new Date()) {
      patientUpdateStatus.textContent = "Date of Birth cannot be in the future.";
      patientUpdateStatus.className = "error";
      return;
    }

    let patients = getPatients();
    const index = patients.findIndex(p => p.patientId.toLowerCase() === currentUser.username.toLowerCase());
    if (index < 0) return;

    patients[index].dob = dob;
    patients[index].allergies = allergies;
    savePatients(patients);

    patientUpdateStatus.textContent = "Health data updated successfully.";
    patientUpdateStatus.className = "success";
  });

  // --- Patient Appointments ---
  function renderPatientAppointments(patientId) {
    const appointments = getAppointments();
    const filtered = appointments.filter(a => a.patientId.toLowerCase() === patientId.toLowerCase());

    patientAppointmentsList.innerHTML = "";
    if (filtered.length === 0) {
      patientAppointmentsList.innerHTML = "<li>No upcoming appointments.</li>";
      return;
    }

    filtered.sort((a, b) => new Date(a.date + "T" + a.time) - new Date(b.date + "T" + b.time));
    filtered.forEach(appt => {
      const li = document.createElement("li");
      li.textContent = `${appt.date} at ${appt.time}`;
      patientAppointmentsList.appendChild(li);
    });
  }

  patientAppointmentForm.addEventListener("submit", e => {
    e.preventDefault();
    patientAppointmentStatus.textContent = "";
    patientAppointmentStatus.className = "";

    if (!currentUser || currentUser.role !== "patient") return;

    const date = patientAppointmentDate.value;
    const time = patientAppointmentTime.value;

    if (!date || !time) {
      patientAppointmentStatus.textContent = "Please fill all fields.";
      patientAppointmentStatus.className = "error";
      return;
    }
    if (new Date(date + "T" + time) < new Date()) {
      patientAppointmentStatus.textContent = "Cannot schedule in the past.";
      patientAppointmentStatus.className = "error";
      return;
    }

    let appointments = getAppointments();
    if (appointments.find(appt => appt.patientId.toLowerCase() === currentUser.username.toLowerCase() && appt.date === date && appt.time === time)) {
      patientAppointmentStatus.textContent = "Appointment conflict detected.";
      patientAppointmentStatus.className = "error";
      return;
    }

    appointments.push({ patientId: currentUser.username, date, time });
    saveAppointments(appointments);

    patientAppointmentDate.value = "";
    patientAppointmentTime.value = "";
    patientAppointmentStatus.textContent = "Appointment scheduled successfully.";
    patientAppointmentStatus.className = "success";

    renderPatientAppointments(currentUser.username);
  });

  patientRefreshBtn && patientRefreshBtn.addEventListener("click", () => {
    if (currentUser && currentUser.role === "patient") renderPatientAppointments(currentUser.username);
  });

  // --- Patient Data Sharing to Sanatorium by code ---
  dataSharingForm.addEventListener("submit", e => {
    e.preventDefault();
    if (!currentUser || currentUser.role !== "patient") return;

    const code = sanatoriumCodeInput.value.trim();
    if (!code) {
      dataSharingStatus.textContent = "Please enter a sanatorium code.";
      dataSharingStatus.className = "error";
      return;
    }

    const sanatoriums = getSanatoriums();
    const found = sanatoriums.find(snt => snt.code.toUpperCase() === code.toUpperCase());
    if (!found) {
      dataSharingStatus.textContent = "Invalid code. No such sanatorium registered.";
      dataSharingStatus.className = "error";
      return;
    }

    // Save patient's consent (overwrite for demo simplicity)
    saveSanatoriumConsent(currentUser.username.toLowerCase(), [found.name + " (" + found.code + ")"]);
    dataSharingStatus.textContent = `Your data has been sent to: ${found.name} (code: ${found.code})`;
    dataSharingStatus.className = "success";
    sanatoriumCodeInput.value = "";
  });

  // --- Admin dashboard logic ---
  function generateSanatoriumCode() {
    return "SNT" + Math.floor(1000 + Math.random() * 9000);
  }

  function renderSanatoriumTable() {
    if (!sanatoriumListAdmin) return;
    const sanatoriums = getSanatoriums();
    sanatoriumListAdmin.innerHTML = "";
    sanatoriums.forEach(snt => {
      const tr = document.createElement("tr");
      tr.innerHTML = `<td>${snt.name}</td><td>${snt.code}</td>`;
      sanatoriumListAdmin.appendChild(tr);
    });
  }

  if (adminSanatoriumForm) {
    adminSanatoriumForm.addEventListener("submit", e => {
      e.preventDefault();
      const name = adminSanatoriumName.value.trim();
      if (!name) {
        adminSanatoriumStatus.textContent = "Please enter a sanatorium name.";
        adminSanatoriumStatus.className = "error";
        return;
      }
      let sanatoriums = getSanatoriums();
      if (sanatoriums.some(s => s.name.toLowerCase() === name.toLowerCase())) {
        adminSanatoriumStatus.textContent = "Sanatorium already exists.";
        adminSanatoriumStatus.className = "error";
        return;
      }
      const code = generateSanatoriumCode();
      sanatoriums.push({ name, code });
      saveSanatoriums(sanatoriums);
      renderSanatoriumTable();
      adminSanatoriumStatus.textContent = `Sanatorium added! Code: ${code}`;
      adminSanatoriumStatus.className = "success";
      adminSanatoriumName.value = "";
    });
  }

  if (adminForwardForm) {
    adminForwardForm.addEventListener("submit", e => {
      e.preventDefault();
      const uname = adminForwardUser.value.trim().toLowerCase();
      const code = adminForwardCode.value.trim();
      if (!uname || !code) {
        adminForwardStatus.textContent = "Fill both patient username and sanatorium code.";
        adminForwardStatus.className = "error";
        return;
      }
      const sanatoriums = getSanatoriums();
      const snt = sanatoriums.find(s => s.code.toUpperCase() === code.toUpperCase());
      if (!snt) {
        adminForwardStatus.textContent = "Sanatorium code not found.";
        adminForwardStatus.className = "error";
        return;
      }
      // Overwrite patient's consent (for demo simplicity)
      saveSanatoriumConsent(uname, [snt.name + " (" + snt.code + ")"]);
      adminForwardStatus.textContent = `Patient data for ${uname} sent to: ${snt.name} (${snt.code})`;
      adminForwardStatus.className = "success";
      adminForwardUser.value = "";
      adminForwardCode.value = "";
    });
  }

  // --- Physician Dashboard logic ---
  function renderPhysicianDashboard(user) {
    physicianNameEl.textContent = user.username;

    if (!user.verified) {
      physicianVerificationStatus.textContent = "Your account is pending verification. Access is restricted.";
      physicianPatientTableBody.innerHTML = "";
      physicianPatientDetails.innerHTML = "";
      return;
    }
    physicianVerificationStatus.textContent = "";
    renderPhysicianPatients();
  }

  function renderPhysicianPatients() {
    physicianPatientTableBody.innerHTML = "";
    physicianPatientDetails.innerHTML = "";
    const patients = getPatients();
    if (patients.length === 0) {
      physicianPatientTableBody.innerHTML = "<tr><td colspan='5' style='text-align:center;'>No patients found.</td></tr>";
      return;
    }
    for (const p of patients) {
      const tr = document.createElement("tr");
      tr.innerHTML = `
        <td>${p.patientId}</td>
        <td>${p.name || "(no name)"}</td>
        <td>${p.dob || "-"}</td>
        <td>${p.allergies || "-"}</td>
        <td><button data-patient-id="${p.patientId}">View Details</button></td>
      `;
      physicianPatientTableBody.appendChild(tr);
    }
    [...physicianPatientTableBody.querySelectorAll("button")].forEach(btn => {
      btn.addEventListener("click", e => {
        const pid = e.target.getAttribute("data-patient-id");
        showPhysicianPatientDetails(pid);
      });
    });
  }

  function showPhysicianPatientDetails(patientId) {
    const patients = getPatients();
    const patient = patients.find(p => p.patientId === patientId);
    if (!patient) return;
    let html = `
      <h3>Details for Patient: ${patient.patientId}</h3>
      <p><strong>Name:</strong> ${patient.name || "(none)"}</p>
      <p><strong>Date of Birth:</strong> ${patient.dob || "-"}</p>
      <p><strong>Allergies:</strong> ${patient.allergies || "-"}</p>
    `;
    const sanatoriums = getSanatoriumConsent(patientId.toLowerCase());
    if (sanatoriums.length > 0) {
      html += "<p><strong>Authorized Sanatorium(s):</strong></p><ul>";
      sanatoriums.forEach(s => {
        html += `<li>${s}</li>`;
      });
      html += "</ul>";
    } else {
      html += "<p><em>No sanatorium consent data.</em></p>";
    }

    const appointments = getAppointments();
    const appts = appointments.filter(a => a.patientId === patientId);
    if (appts.length === 0) {
      html += "<p><em>No appointments scheduled.</em></p>";
    } else {
      html += "<p><strong>Appointments:</strong></p><ul>";
      appts.forEach(a => {
        html += `<li>${a.date} at ${a.time}</li>`;
      });
      html += "</ul>";
    }
    physicianPatientDetails.innerHTML = html;
  }

  physicianRefreshBtn && physicianRefreshBtn.addEventListener("click", () => {
    if (currentUser && currentUser.role === "physician" && currentUser.verified) {
      renderPhysicianPatients();
    }
  });

  // --- On page load ---
  window.addEventListener("DOMContentLoaded", () => {
    const user = loadCurrentUser();
    if (user) {
      initDashboardForUser(user);
    } else {
      showSection("register");
    }
    setDobRange();
  });
})();
