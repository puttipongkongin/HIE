(() => {
  "use strict";

  /*** DOM Elements ***/
  const sections = {
    register: document.getElementById("registerSection"),
    login: document.getElementById("loginSection"),
    patientDashboard: document.getElementById("patientDashboard"),
    physicianDashboard: document.getElementById("physicianDashboard"),
    adminDashboard: document.getElementById("adminDashboard"),
    nav: document.getElementById("nav"),
  };

  const registerForm = document.getElementById("registerForm");
  const loginForm = document.getElementById("loginForm");
  const registerRole = document.getElementById("registerRole");
  const physicianVerificationFields = document.getElementById("physicianVerificationFields");
  const registerStatus = document.getElementById("registerStatus");
  const loginStatus = document.getElementById("loginStatus");

  const adminNameEl = document.getElementById("adminName");
  const adminSanatoriumForm = document.getElementById("adminSanatoriumForm");
  const adminSanatoriumNameInput = document.getElementById("adminSanatoriumName");
  const adminSanatoriumStatus = document.getElementById("adminSanatoriumStatus");
  const sanatoriumListAdmin = document.getElementById("sanatoriumListAdmin");
  const adminForwardForm = document.getElementById("adminForwardForm");
  const adminForwardUser = document.getElementById("adminForwardUser");
  const adminForwardCode = document.getElementById("adminForwardCode");
  const adminForwardStatus = document.getElementById("adminForwardStatus");

  const patientNameEl = document.getElementById("patientName");
  const patientDataForm = document.getElementById("patientDataForm");
  const patientDobInput = document.getElementById("patientDob");
  const patientAllergiesInput = document.getElementById("patientAllergies");
  const patientUpdateStatus = document.getElementById("patientUpdateStatus");
  const patientAppointmentForm = document.getElementById("patientAppointmentForm");
  const patientAppointmentDate = document.getElementById("patientAppointmentDate");
  const patientAppointmentTime = document.getElementById("patientAppointmentTime");
  const patientAppointmentStatus = document.getElementById("patientAppointmentStatus");
  const patientAppointmentsList = document.getElementById("patientAppointmentsList");
  const patientRefreshBtn = document.getElementById("patientRefreshBtn");
  const sanatoriumCodeInput = document.getElementById("sanatoriumCodeInput");
  const dataSharingForm = document.getElementById("dataSharingForm");
  const dataSharingStatus = document.getElementById("dataSharingStatus");
  const deleteMyDataBtn = document.getElementById("deleteMyDataBtn");
  const dataDeletionStatus = document.getElementById("dataDeletionStatus");

  const physicianNameEl = document.getElementById("physicianName");
  const physicianVerificationStatus = document.getElementById("physicianVerificationStatus");
  const physicianPatientTableBody = document.getElementById("physicianPatientTableBody");
  const physicianPatientDetails = document.getElementById("physicianPatientDetails");
  const physicianRefreshBtn = document.getElementById("physicianRefreshBtn");
  const physicianLogoutBtn = document.getElementById("physicianLogoutBtn");

  const dashboardBtn = document.getElementById("dashboardBtn");
  const logoutBtn = document.getElementById("logoutBtn");
  const showLoginBtn = document.getElementById("showLoginBtn");
  const showRegisterBtn = document.getElementById("showRegisterBtn");

  const notificationBell = document.getElementById("notificationBell");
  const notificationCount = document.getElementById("notificationCount");
  const notificationDropdown = document.getElementById("notificationDropdown");
  const notificationList = document.getElementById("notificationList");

  // Local Storage Keys
  const STORAGE_KEYS = {
    USERS: "hie_users",
    SANATORIUMS: "hie_sanatoriums",
    APPOINTMENTS: "hie_appointments",
    CONSENTS: "hie_consents",
    PATIENTS: "hie_patients",
    SESSION_USER: "hie_currentUser",
  };

  let currentUser = null;
  let notifications = [];

  // Get and Save in localStorage
  const getData = (key) => {
    try {
      return JSON.parse(localStorage.getItem(key)) || [];
    } catch {
      return [];
    }
  };
  const saveData = (key, value) => localStorage.setItem(key, JSON.stringify(value));

  // Users Management
  const getUsers = () => getData(STORAGE_KEYS.USERS);
  const saveUsers = (users) => saveData(STORAGE_KEYS.USERS, users);

  // Sanatoriums
  const getSanatoriums = () => getData(STORAGE_KEYS.SANATORIUMS);
  const saveSanatoriums = (data) => saveData(STORAGE_KEYS.SANATORIUMS, data);

  // Appointments
  const getAppointments = () => getData(STORAGE_KEYS.APPOINTMENTS);
  const saveAppointments = (data) => saveData(STORAGE_KEYS.APPOINTMENTS, data);

  // Patients data (health info)
  const getPatients = () => getData(STORAGE_KEYS.PATIENTS);
  const savePatients = (data) => saveData(STORAGE_KEYS.PATIENTS, data);

  // Consents (per patient username, array of sanatorium name/code)
  const getConsents = () => {
    try {
      return JSON.parse(localStorage.getItem(STORAGE_KEYS.CONSENTS)) || {};
    } catch {
      return {};
    }
  };
  const saveConsents = (data) => localStorage.setItem(STORAGE_KEYS.CONSENTS, JSON.stringify(data));

  // Session User
  function setCurrentUser(user) {
    localStorage.setItem(STORAGE_KEYS.SESSION_USER, JSON.stringify(user));
    currentUser = user;
  }
  function loadCurrentUser() {
    try {
      const u = localStorage.getItem(STORAGE_KEYS.SESSION_USER);
      return u ? JSON.parse(u) : null;
    } catch {
      return null;
    }
  }
  function clearCurrentUser() {
    localStorage.removeItem(STORAGE_KEYS.SESSION_USER);
    currentUser = null;
  }

  // Escape html
  const escapeHtml = (text) => {
    if (typeof text !== "string") return text;
    return text.replace(/[&<>"']/g, (m) => ({
      "&": "&amp;",
      "<": "&lt;",
      ">": "&gt;",
      '"': "&quot;",
      "'": "&#39;",
    })[m]);
  };

  // Generate unique sanatorium code
  const generateSanatoriumCode = () =>
    "SNT" + Math.floor(1000 + Math.random() * 9000);

  // Show/Hide sections
  function showSection(name) {
    Object.keys(sections).forEach(k =>
      sections[k].classList.toggle("hidden", k !== name)
    );
    if (["adminDashboard", "patientDashboard", "physicianDashboard"].includes(name)) {
      sections.nav.classList.remove("hidden");
    } else {
      sections.nav.classList.add("hidden");
    }
  }

  // Notifications handling
  function updateNotificationUI() {
    if (notifications.length > 0) {
      notificationCount.style.display = "inline-block";
      notificationCount.textContent = notifications.length;
      notificationBell.setAttribute("aria-expanded", "false");
      notificationDropdown.style.display = "none";
    } else {
      notificationCount.style.display = "none";
      notificationDropdown.style.display = "none";
    }
    notificationList.innerHTML = notifications
      .slice()
      .reverse()
      .map((n) => `<li>${escapeHtml(n)}</li>`)
      .join("");
  }
  notificationBell.addEventListener("click", () => {
    const expanded = notificationBell.getAttribute("aria-expanded") === "true";
    if (expanded) {
      notificationDropdown.style.display = "none";
      notificationBell.setAttribute("aria-expanded", "false");
    } else {
      notificationDropdown.style.display = "block";
      notificationBell.setAttribute("aria-expanded", "true");
      notifications = [];
      updateNotificationUI();
    }
  });
  function notify(message) {
    notifications.push(message);
    updateNotificationUI();
  }

  // Registration role selection
  registerRole.addEventListener("change", () => {
    physicianVerificationFields.classList.toggle(registerRole.value !== "physician");
  });

  // Registration submit
  registerForm.addEventListener("submit", (e) => {
    e.preventDefault();
    ["registerUsernameError", "registerPasswordError", "registerRoleError", "licenseNumberError"].forEach((id) => {
      const el = document.getElementById(id);
      if(el) el.textContent = "";
    });
    registerStatus.textContent = "";
    registerStatus.className = "";

    const username = document.getElementById("registerUsername").value.trim();
    const password = document.getElementById("registerPassword").value;
    const role = registerRole.value;
    const licenseNumber = document.getElementById("licenseNumber").value.trim();
    const verified = document.getElementById("verifiedCheckbox").checked;

    let valid = true;
    if (!username || username.length < 3) {
      document.getElementById("registerUsernameError").textContent = "Username must be at least 3 characters.";
      valid = false;
    }
    if (!password || password.length < 6) {
      document.getElementById("registerPasswordError").textContent = "Password must be at least 6 characters.";
      valid = false;
    }
    if (!["patient", "physician", "admin"].includes(role)) {
      document.getElementById("registerRoleError").textContent = "Please select a valid role.";
      valid = false;
    }
    if (role === "physician" && (!licenseNumber || licenseNumber.length < 5)) {
      document.getElementById("licenseNumberError").textContent = "Valid license number required for physicians.";
      valid = false;
    }
    if (!valid) return;

    const users = getUsers();
    if (users.find(u => u.username.toLowerCase() === username.toLowerCase())) {
      registerStatus.textContent = "Username already exists.";
      registerStatus.className = "error";
      return;
    }

    const newUser = {
      userId: crypto.randomUUID ? crypto.randomUUID() : Date.now().toString(),
      username,
      password,
      role,
      licenseNumber: role === "physician" ? licenseNumber : "",
      verified: role === "physician" ? verified : true,
    };

    users.push(newUser);
    saveUsers(users);
    notify(`User registered: ${username}`);

    registerStatus.textContent = "Registration successful! You can now login.";
    registerStatus.className = "success";

    setTimeout(() => {
      clearFormsAndMessages();
      showSection("login");
    }, 1500);
  });

  // Login submit
  loginForm.addEventListener("submit", (e) => {
    e.preventDefault();
    document.getElementById("loginUsernameError").textContent = "";
    document.getElementById("loginPasswordError").textContent = "";
    loginStatus.textContent = "";
    loginStatus.className = "";

    const username = document.getElementById("loginUsername").value.trim();
    const password = document.getElementById("loginPassword").value;

    if (!username) {
      document.getElementById("loginUsernameError").textContent = "Username is required.";
      return;
    }
    if (!password) {
      document.getElementById("loginPasswordError").textContent = "Password is required.";
      return;
    }

    const users = getUsers();
    const user = users.find(u => u.username.toLowerCase() === username.toLowerCase());
    if (!user || user.password !== password) {
      loginStatus.textContent = "Invalid username or password.";
      loginStatus.className = "error";
      return;
    }

    setCurrentUser(user);
    initDashboardForUser(user);
  });

  // Logout and navigation buttons
  logoutBtn.addEventListener("click", () => {
    clearCurrentUser();
    clearFormsAndMessages();
    showSection("login");
  });
  dashboardBtn.addEventListener("click", () => {
    if (currentUser) initDashboardForUser(currentUser);
  });
  showLoginBtn.addEventListener("click", () => {
    clearFormsAndMessages();
    showSection("login");
  });
  showRegisterBtn.addEventListener("click", () => {
    clearFormsAndMessages();
    showSection("register");
  });

  // Clear forms and messages helpers
  function clearFormsAndMessages() {
    ["registerUsernameError", "registerPasswordError", "registerRoleError", "licenseNumberError",
      "registerStatus", "loginUsernameError", "loginPasswordError", "loginStatus",
      "adminSanatoriumStatus", "adminForwardStatus",
      "patientUpdateStatus", "patientAppointmentStatus", "dataSharingStatus", "dataDeletionStatus"].forEach(id => {
      const el = document.getElementById(id);
      if (el) el.textContent = "";
    });
    ["registerUsername", "registerPassword", "licenseNumber", "loginUsername", "loginPassword",
      "adminSanatoriumName", "adminForwardUser", "adminForwardCode",
      "sanatoriumCodeInput", "patientAppointmentDate", "patientAppointmentTime",
      "patientDob", "patientAllergies"].forEach(id => {
      const el = document.getElementById(id);
      if (el) el.value = "";
    });
  }

  // Initialize dashboard based on role
  function initDashboardForUser(user) {
    clearFormsAndMessages();

    switch (user.role) {
      case "admin":
        showSection("adminDashboard");
        setupAdminDashboard(user);
        notify(`Welcome Admin ${user.username}`);
        break;
      case "patient":
        showSection("patientDashboard");
        setupPatientDashboard(user);
        notify(`Welcome, ${user.username}`);
        break;
      case "physician":
        showSection("physicianDashboard");
        setupPhysicianDashboard(user);
        notify(`Welcome Dr. ${user.username}`);
        break;
      default:
        alert("Unknown user role.");
        clearCurrentUser();
        showSection("login");
    }
  }

  // --- Admin Dashboard functions ---
  function setupAdminDashboard(user) {
    adminNameEl.textContent = user.username;

    renderSanatoriumTable();

    adminSanatoriumForm.onsubmit = (e) => {
      e.preventDefault();
      adminSanatoriumStatus.textContent = "";
      const name = adminSanatoriumNameInput.value.trim();

      if (!name) {
        adminSanatoriumStatus.textContent = "Sanatorium name cannot be empty.";
        adminSanatoriumStatus.className = "error";
        return;
      }

      let sanatoriums = getSanatoriums();

      // Only one sanatorium per admin
      if (sanatoriums.some(s => s.adminUsername?.toLowerCase() === user.username.toLowerCase())) {
        adminSanatoriumStatus.textContent = "You can register only one sanatorium.";
        adminSanatoriumStatus.className = "error";
        return;
      }
      if (sanatoriums.some(s => s.name.toLowerCase() === name.toLowerCase())) {
        adminSanatoriumStatus.textContent = "Sanatorium name already exists.";
        adminSanatoriumStatus.className = "error";
        return;
      }

      let code;
      do {
        code = generateSanatoriumCode();
      } while (sanatoriums.find(s => s.code === code));

      sanatoriums.push({ name, code, adminUsername: user.username });
      saveSanatoriums(sanatoriums);
      renderSanatoriumTable();

      adminSanatoriumStatus.textContent = `Sanatorium added with code: ${code}`;
      adminSanatoriumStatus.className = "success";
      adminSanatoriumNameInput.value = "";
    };

    adminForwardForm.onsubmit = (e) => {
      e.preventDefault();
      adminForwardStatus.textContent = "";
      const patient = adminForwardUser.value.trim().toLowerCase();
      const code = adminForwardCode.value.trim();

      if (!patient || !code) {
        adminForwardStatus.textContent = "Fill both Patient Username and Sanatorium Code.";
        adminForwardStatus.className = "error";
        return;
      }
      const sanatoriums = getSanatoriums();
      const san = sanatoriums.find(s => s.code.toUpperCase() === code.toUpperCase());

      if (!san) {
        adminForwardStatus.textContent = "Invalid Sanatorium Code.";
        adminForwardStatus.className = "error";
        return;
      }
      // Manage consents here (for demo just notify)
      adminForwardStatus.textContent = `Patient data forwarded to sanatorium ${san.name} (code: ${san.code})`;
      adminForwardStatus.className = "success";

      adminForwardUser.value = "";
      adminForwardCode.value = "";
    };
  }
  function renderSanatoriumTable() {
    if (!sanatoriumListAdmin) return;
    const sanatoriums = getSanatoriums();
    sanatoriumListAdmin.innerHTML = "";

    if (sanatoriums.length === 0) {
      sanatoriumListAdmin.innerHTML = `<tr><td colspan="2" style="text-align:center;">No sanatoriums registered yet.</td></tr>`;
      return;
    }

    sanatoriums.forEach(snt => {
      const tr = document.createElement("tr");
      tr.innerHTML = `<td>${escapeHtml(snt.name)}</td><td>${escapeHtml(snt.code)}</td>`;
      sanatoriumListAdmin.appendChild(tr);
    });
  }

  // --- Patient Dashboard functions ---
  function setupPatientDashboard(user) {
    patientNameEl.textContent = user.username;

    // Load or create patient health data
    let patients = getPatients();
    let patientData = patients.find(p => p.patientId && p.patientId.toLowerCase() === user.username.toLowerCase());
    if (!patientData) {
      patientData = { patientId: user.username, dob: "", allergies: "" };
      patients.push(patientData);
      savePatients(patients);
    }
    patientDobInput.value = patientData.dob || "";
    patientAllergiesInput.value = patientData.allergies || "";

    renderPatientAppointments(user.username);

    patientDataForm.onsubmit = (e) => {
      e.preventDefault();
      patientUpdateStatus.textContent = "";

      const dob = patientDobInput.value;
      if (dob && new Date(dob) > new Date()) {
        patientUpdateStatus.textContent = "Date of Birth cannot be in the future.";
        patientUpdateStatus.className = "error";
        return;
      }

      const allergies = patientAllergiesInput.value.trim();

      // Save data
      let patients = getPatients();
      const idx = patients.findIndex(p => p.patientId.toLowerCase() === user.username.toLowerCase());
      if (idx >= 0) {
        patients[idx].dob = dob;
        patients[idx].allergies = allergies;
      } else {
        patients.push({ patientId: user.username, dob, allergies });
      }
      savePatients(patients);

      patientUpdateStatus.textContent = "Health data updated.";
      patientUpdateStatus.className = "success";
    };

    patientAppointmentForm.onsubmit = (e) => {
      e.preventDefault();
      patientAppointmentStatus.textContent = "";

      const date = patientAppointmentDate.value;
      const time = patientAppointmentTime.value;

      if (!date || !time) {
        patientAppointmentStatus.textContent = "Please enter both date and time.";
        patientAppointmentStatus.className = "error";
        return;
      }

      if (new Date(`${date}T${time}`) < new Date()) {
        patientAppointmentStatus.textContent = "Cannot schedule appointment in the past.";
        patientAppointmentStatus.className = "error";
        return;
      }

      let appointments = getAppointments();
      if (appointments.find(a => a.patientId.toLowerCase() === user.username.toLowerCase() && a.date === date && a.time === time)) {
        patientAppointmentStatus.textContent = "You already have an appointment at this time.";
        patientAppointmentStatus.className = "error";
        return;
      }

      appointments.push({ patientId: user.username, date, time });
      saveAppointments(appointments);

      patientAppointmentStatus.textContent = "Appointment scheduled.";
      patientAppointmentStatus.className = "success";

      patientAppointmentDate.value = "";
      patientAppointmentTime.value = "";

      renderPatientAppointments(user.username);
    };

    deleteMyDataBtn && deleteMyDataBtn.addEventListener("click", () => {
      if (!confirm("This will permanently delete all your data and cannot be undone. Continue?")) return;

      // Delete health data
      let patients = getPatients();
      patients = patients.filter(p => p.patientId.toLowerCase() !== user.username.toLowerCase());
      savePatients(patients);

      // Delete appointments
      let appointments = getAppointments();
      appointments = appointments.filter(a => a.patientId.toLowerCase() !== user.username.toLowerCase());
      saveAppointments(appointments);

      // Delete consents
      let consents = getConsents();
      delete consents[user.username.toLowerCase()];
      saveConsents(consents);

      // Clear UI & Log out
      dataDeletionStatus.textContent = "All your data has been deleted.";
      dataDeletionStatus.className = "success";

      setTimeout(() => {
        clearCurrentUser();
        clearFormsAndMessages();
        showSection("register");
      }, 2000);
    });

    dataSharingForm.onsubmit = (e) => {
      e.preventDefault();
      dataSharingStatus.textContent = "";

      const code = sanatoriumCodeInput.value.trim();

      if (!code) {
        dataSharingStatus.textContent = "Please enter a sanatorium code.";
        dataSharingStatus.className = "error";
        return;
      }

      const sanatoriums = getSanatoriums();
      const found = sanatoriums.find(s => s.code.toUpperCase() === code.toUpperCase());

      if (!found) {
        dataSharingStatus.textContent = "Sanatorium code not found.";
        dataSharingStatus.className = "error";
        return;
      }

      let consents = getConsents();
      if (!consents[user.username.toLowerCase()]) consents[user.username.toLowerCase()] = [];
      if (!consents[user.username.toLowerCase()].includes(found.name + " (" + found.code + ")")) {
        consents[user.username.toLowerCase()].push(found.name + " (" + found.code + ")");
      }
      saveConsents(consents);

      dataSharingStatus.textContent = `Data shared with sanatorium: ${found.name} (${found.code})`;
      dataSharingStatus.className = "success";
      sanatoriumCodeInput.value = "";
    };

    patientRefreshBtn && patientRefreshBtn.addEventListener("click", () => {
      renderPatientAppointments(user.username);
    });
  }

  function renderPatientAppointments(username) {
    const appts = getAppointments().filter(a => a.patientId.toLowerCase() === username.toLowerCase());
    patientAppointmentsList.innerHTML = "";

    if (appts.length === 0) {
      patientAppointmentsList.innerHTML = "<li>No upcoming appointments.</li>";
      return;
    }

    appts.sort((a, b) => new Date(a.date + "T" + a.time) - new Date(b.date + "T" + b.time));

    appts.forEach(appt => {
      const li = document.createElement("li");
      li.style.marginBottom = "0.5rem";

      li.textContent = `${appt.date} at ${appt.time} `;

      const btn = document.createElement("button");
      btn.textContent = "Cancel";
      btn.className = "cancelApptBtn";
      btn.setAttribute("aria-label", `Cancel appointment on ${appt.date} at ${appt.time}`);
      btn.addEventListener("click", () => {
        if (confirm(`Cancel your appointment on ${appt.date} at ${appt.time}?`)) {
          let appointments = getAppointments();
          appointments = appointments.filter(a => !(a.patientId.toLowerCase() === username.toLowerCase() && a.date === appt.date && a.time === appt.time));
          saveAppointments(appointments);
          notify("Appointment cancelled.");
          renderPatientAppointments(username);
        }
      });

      li.appendChild(btn);
      patientAppointmentsList.appendChild(li);
    });
  }

  // --- Physician dashboard (basic placeholder) ---
  function setupPhysicianDashboard(user) {
    physicianNameEl.textContent = user.username;
    physicianVerificationStatus.textContent = user.verified ? "" : "Account pending verification.";

    if (!user.verified) {
      physicianPatientTableBody.innerHTML = "";
      physicianPatientDetails.innerHTML = "";
      return;
    }

    // In a real app, physician's patient list and messaging would be loaded here
  }

  physicianRefreshBtn && physicianRefreshBtn.addEventListener("click", () => {
    if (currentUser && currentUser.role === "physician" && currentUser.verified) {
      setupPhysicianDashboard(currentUser);
    }
  });
  physicianLogoutBtn && physicianLogoutBtn.addEventListener("click", () => {
    clearCurrentUser();
    clearFormsAndMessages();
    showSection("login");
  });

  // Set Date of Birth input range on load
  function setDobRange() {
    const input = patientDobInput;
    if (!input) return;
    const today = new Date();
    const yyyy = today.getFullYear();
    const mm = String(today.getMonth() + 1).padStart(2, "0");
    const dd = String(today.getDate()).padStart(2, "0");
    input.max = `${yyyy}-${mm}-${dd}`;
    input.min = `${yyyy - 150}-${mm}-${dd}`;
  }

  // On page load
  window.addEventListener("DOMContentLoaded", () => {
    setDobRange();
    const usr = loadCurrentUser();
    if (usr) {
      currentUser = usr;
      initDashboardForUser(usr);
    } else {
      showSection("register");
    }
    updateNotificationUI();
  });

})();
